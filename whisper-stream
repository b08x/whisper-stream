#!/bin/bash

#TODO: implement a proper uninstall script that removes all files and directories created by this script

# Find the script's own directory
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)

# Determine installation root and set paths for lib and scripts
if [ -d "$SCRIPT_DIR/lib" ]; then
  # Manual/local install
  INSTALL_ROOT="$SCRIPT_DIR"
elif [ -d "/usr/share/whisper-stream/lib" ]; then
  # Package manager install
  INSTALL_ROOT="/usr/share/whisper-stream"
else
  echo "Error: Could not find the library directory." >&2
  echo "Looked for '$SCRIPT_DIR/lib' and '/usr/share/whisper-stream/lib'." >&2
  echo "Please ensure the script is run from its directory or installed correctly." >&2
  exit 1
fi

LIB_DIR="$INSTALL_ROOT/lib"
SCRIPTS_DIR="$INSTALL_ROOT/scripts"

# Source all library files
source "$LIB_DIR/logging.sh"
source "$LIB_DIR/gum_wrapper.sh"
source "$LIB_DIR/config.sh"
source "$LIB_DIR/ui.sh"
source "$LIB_DIR/audio.sh"
source "$LIB_DIR/transcription.sh"
source "$LIB_DIR/arguments.sh"
# Try to source first_time_setup.sh
if [[ -f "$SCRIPTS_DIR/first_time_setup.sh" ]]; then
    source "$SCRIPTS_DIR/first_time_setup.sh"
else
    # Define minimal first-time setup functions if file not found
    is_first_run() { return 1; }
    run_first_time_setup() { return 0; }
fi

# --- Main Application ---

# Initialize error logging
rotate_error_log
log_error "whisper-stream started (PID: $$)"

# Check if essential commands are installed
if ! command -v sox &>/dev/null; then
    echo "Error: sox is not installed. Please install it to use this script."
    exit 1
fi
if ! command -v jq &>/dev/null; then
    echo "Error: jq is not installed. Please install it to use this script."
    exit 1
fi
gum_init # Initialize or install gum

# Check for first-time setup
if is_first_run; then
    if run_first_time_setup; then
        # User chose to continue to main app after setup
        echo
        gum_info "Continuing to whisper-stream..."
        sleep 1
    else
        # Setup completed, user chose to exit
        exit 0
    fi
fi

# Load config from ~/.config/whisper-stream/config if it exists
# Do this before parsing args so args can override config
load_config "$@"

# Parse command-line arguments, which may override config values
parse_arguments "$@"

# Display version if the version flag is set
if [ "$SHOW_VERSION" = true ]; then
    echo "Whisper Stream Speech-to-Text Transcriber (version: $VERSION)"
    exit
fi

# Fetch Groq API token from environment if not provided
if [ -z "$TOKEN" ]; then
    TOKEN="${GROQ_API_KEY:-}"
fi
if [ -z "$TOKEN" ]; then
    gum_fail "No Groq API key provided. Please provide it via config, -t flag, or GROQ_API_KEY env var."
    exit 1
fi

output_files=() # Array to store the names of output audio files

# Handle the script termination: clean up and save transcriptions
function handle_exit() {
    # Set flag to indicate this is a clean shutdown
    export WHISPER_STREAM_CLEAN_EXIT=true
    
    log_error "whisper-stream exiting (PID: $$)"

    # Wait for any currently running background jobs to finish
    wait

    # Kill any remaining child processes (like sox/rec if they are stuck)
    pkill -P $$ >/dev/null 2>&1

    # Remove temporary audio files
    for file in "${output_files[@]}"; do
        rm -f "$file"
    done

    printf "\r\e[K\n"

    if [ -n "$DEST_FILE" ]; then
        gum_info "Exiting. Transcription saved to $DEST_FILE"
    fi

    exit 0
}

# --- Interactive Setup for Recording Mode ---
if [ -z "$AUDIO_FILE" ]; then
    # Check if we need to prompt for input device
    if [ -z "$SELECTED_INPUT_DEVICE" ]; then
        gum_info "No input device specified. Please select one:"
        SELECTED_INPUT_DEVICE=$(select_input_device)

        # Save the selected device to config if a specific device was chosen
        if [ -n "$SELECTED_INPUT_DEVICE" ] && [ "$SELECTED_INPUT_DEVICE" != "" ]; then
            gum_info "Selected input device: $SELECTED_INPUT_DEVICE"
            write_device_to_config "$SELECTED_INPUT_DEVICE"
        fi
    fi

    # Check for notebook root directory selection
    if [ ! -d "${NOTEBOOK_ROOT/#\$HOME/$HOME}" ]; then
        gum_warn "Notebook root not found. Please select a directory:"
        SELECTED_DIR=$(gum_file --directory --header "Select Notebook Root Directory" "$HOME")

        if [ -n "$SELECTED_DIR" ]; then
            NOTEBOOK_ROOT="$SELECTED_DIR"
            gum_info "Selected notebook root: $NOTEBOOK_ROOT"
            write_notebook_root_to_config "$NOTEBOOK_ROOT"
        else
            gum_warn "No directory selected. Using default: $HOME/Notebooks"
            NOTEBOOK_ROOT="$HOME/Notebooks"
            mkdir -p "$NOTEBOOK_ROOT"
        fi
    fi

    # Set destination file if none specified
    if [ -z "$DEST_FILE" ]; then
        DEST_CHOICE=$(gum_choose "Auto-generate daily file" "Select custom file" --header "Choose destination for transcriptions")

        if [ "$DEST_CHOICE" == "Select custom file" ]; then
            gum_info "Select destination file (or navigate to create a new one):"
            CUSTOM_DEST=$(gum_file --header "Select Destination File" "${NOTEBOOK_ROOT/#\$HOME/$HOME}")

            if [ -n "$CUSTOM_DEST" ]; then
                DEST_FILE="$CUSTOM_DEST"
                gum_info "Selected destination file: $DEST_FILE"
            else
                DEST_FILE=$(generate_default_dest_file)
                gum_warn "No file selected. Using auto-generated file: $DEST_FILE"
            fi
        else
            DEST_FILE=$(generate_default_dest_file)
            gum_info "Using auto-generated daily file: $DEST_FILE"
        fi
    fi
fi

# --- Main Logic ---

# If an audio file is provided, convert it to text and then exit
if [ -n "$AUDIO_FILE" ]; then
    display_settings # Display settings for file mode
    gum_info "Please wait..."
    convert_audio_to_text "$AUDIO_FILE"
    # Since file mode is a one-shot operation, we need to call handle_exit to save properly if needed
    # The new `handle_exit` is safe for this as it no longer contains batch-saving logic.
    handle_exit
fi

# Display the current configuration for recording mode
display_settings

# Handle script termination using trap for SIGINT (Ctrl+C) and SIGTSTP (Ctrl+Z)
trap handle_exit SIGINT SIGTSTP

# Main loop to continuously record audio
while true; do
    OUTPUT_FILE="/tmp/whisper-stream_output_$(date +%s).wav"
    output_files+=("$OUTPUT_FILE")

    # --- CORRECTED COMMAND CONSTRUCTION ---
    # Initialize the arguments array for the rec command
    REC_ARGS=()
    if [ -n "$SELECTED_INPUT_DEVICE" ] && [ "$SELECTED_INPUT_DEVICE" != "System Default" ]; then
        # For a specific device with pulseaudio, the device name is the "input file"
        REC_ARGS=("-t" "pulseaudio" "$SELECTED_INPUT_DEVICE")
    fi

    # Add the common recording parameters and specify output to stdout (-)
    REC_ARGS+=("-q" "-V0" "-e" "signed" "-L" "-c" "1" "-b" "16" "-r" "16000" "-t" "raw" "-")

    # Add SoX effects for silence detection
    if [ "$DURATION" -gt 0 ]; then
        REC_ARGS+=("trim" "0" "$DURATION" "silence" "1" "0.1" "$MIN_VOLUME" "1" "$SILENCE_LENGTH" "$MIN_VOLUME")
    else
        REC_ARGS+=("silence" "1" "0.1" "$MIN_VOLUME" "1" "$SILENCE_LENGTH" "$MIN_VOLUME")
    fi
    # --- END CORRECTION ---

    # Record audio using constructed arguments and pipe to sox for file conversion
    rec "${REC_ARGS[@]}" | sox -t raw -r 16000 -b 16 -e signed -c 1 - "$OUTPUT_FILE"

    if [ -s "$OUTPUT_FILE" ] && ! is_silent "$OUTPUT_FILE"; then
        (convert_audio_to_text "$OUTPUT_FILE") &
        pid=$!
        spinner $pid
    else
        # either file is empty or just silence, remove the empty file
        rm -f "$OUTPUT_FILE"
    fi

    if [ "$ONESHOT" = true ]; then
        # In one-shot mode, wait for the last transcription to finish, then exit.
        wait
        break
    fi
done

# Final cleanup for one-shot mode or if the loop breaks for other reasons
handle_exit
